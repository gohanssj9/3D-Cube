// Generated by purs bundle 0.11.7
var PS = {};
(function(exports) {
  // Generated by purs version 0.11.7
  "use strict";
  var Semigroupoid = function (compose) {
      this.compose = compose;
  };
  var semigroupoidFn = new Semigroupoid(function (f) {
      return function (g) {
          return function (x) {
              return f(g(x));
          };
      };
  });
  var compose = function (dict) {
      return dict.compose;
  };
  exports["compose"] = compose;
  exports["Semigroupoid"] = Semigroupoid;
  exports["semigroupoidFn"] = semigroupoidFn;
})(PS["Control.Semigroupoid"] = PS["Control.Semigroupoid"] || {});
(function(exports) {
  // Generated by purs version 0.11.7
  "use strict";
  var Control_Semigroupoid = PS["Control.Semigroupoid"];        
  var Category = function (Semigroupoid0, id) {
      this.Semigroupoid0 = Semigroupoid0;
      this.id = id;
  };
  var id = function (dict) {
      return dict.id;
  };
  var categoryFn = new Category(function () {
      return Control_Semigroupoid.semigroupoidFn;
  }, function (x) {
      return x;
  });
  exports["Category"] = Category;
  exports["id"] = id;
  exports["categoryFn"] = categoryFn;
})(PS["Control.Category"] = PS["Control.Category"] || {});
(function(exports) {
  // Generated by purs version 0.11.7
  "use strict";
  var Control_Category = PS["Control.Category"];
  var $$const = function (a) {
      return function (v) {
          return a;
      };
  };
  exports["const"] = $$const;
})(PS["Data.Function"] = PS["Data.Function"] || {});
(function(exports) {
    "use strict";

  exports.unit = {};
})(PS["Data.Unit"] = PS["Data.Unit"] || {});
(function(exports) {
  // Generated by purs version 0.11.7
  "use strict";
  var $foreign = PS["Data.Unit"];
  var Data_Show = PS["Data.Show"];
  exports["unit"] = $foreign.unit;
})(PS["Data.Unit"] = PS["Data.Unit"] || {});
(function(exports) {
  // Generated by purs version 0.11.7
  "use strict";
  var $foreign = PS["Data.Functor"];
  var Control_Semigroupoid = PS["Control.Semigroupoid"];
  var Data_Function = PS["Data.Function"];
  var Data_Unit = PS["Data.Unit"];        
  var Functor = function (map) {
      this.map = map;
  };
  var map = function (dict) {
      return dict.map;
  };
  var $$void = function (dictFunctor) {
      return map(dictFunctor)(Data_Function["const"](Data_Unit.unit));
  };
  exports["Functor"] = Functor;
  exports["map"] = map;
  exports["void"] = $$void;
})(PS["Data.Functor"] = PS["Data.Functor"] || {});
(function(exports) {
  // Generated by purs version 0.11.7
  "use strict";
  var $foreign = PS["Control.Apply"];
  var Control_Category = PS["Control.Category"];
  var Data_Function = PS["Data.Function"];
  var Data_Functor = PS["Data.Functor"];        
  var Apply = function (Functor0, apply) {
      this.Functor0 = Functor0;
      this.apply = apply;
  };                      
  var apply = function (dict) {
      return dict.apply;
  };
  exports["Apply"] = Apply;
  exports["apply"] = apply;
})(PS["Control.Apply"] = PS["Control.Apply"] || {});
(function(exports) {
  // Generated by purs version 0.11.7
  "use strict";
  var Control_Apply = PS["Control.Apply"];
  var Data_Functor = PS["Data.Functor"];
  var Data_Unit = PS["Data.Unit"];        
  var Applicative = function (Apply0, pure) {
      this.Apply0 = Apply0;
      this.pure = pure;
  };
  var pure = function (dict) {
      return dict.pure;
  };
  var liftA1 = function (dictApplicative) {
      return function (f) {
          return function (a) {
              return Control_Apply.apply(dictApplicative.Apply0())(pure(dictApplicative)(f))(a);
          };
      };
  };
  exports["Applicative"] = Applicative;
  exports["pure"] = pure;
  exports["liftA1"] = liftA1;
})(PS["Control.Applicative"] = PS["Control.Applicative"] || {});
(function(exports) {
  // Generated by purs version 0.11.7
  "use strict";
  var $foreign = PS["Control.Bind"];
  var Control_Applicative = PS["Control.Applicative"];
  var Control_Apply = PS["Control.Apply"];
  var Control_Category = PS["Control.Category"];
  var Data_Function = PS["Data.Function"];
  var Data_Functor = PS["Data.Functor"];
  var Data_Unit = PS["Data.Unit"];        
  var Bind = function (Apply0, bind) {
      this.Apply0 = Apply0;
      this.bind = bind;
  };                     
  var bind = function (dict) {
      return dict.bind;
  };
  exports["Bind"] = Bind;
  exports["bind"] = bind;
})(PS["Control.Bind"] = PS["Control.Bind"] || {});
(function(exports) {
  // Generated by purs version 0.11.7
  "use strict";
  var Control_Applicative = PS["Control.Applicative"];
  var Control_Apply = PS["Control.Apply"];
  var Control_Bind = PS["Control.Bind"];
  var Data_Functor = PS["Data.Functor"];
  var Data_Unit = PS["Data.Unit"];        
  var Monad = function (Applicative0, Bind1) {
      this.Applicative0 = Applicative0;
      this.Bind1 = Bind1;
  };
  var ap = function (dictMonad) {
      return function (f) {
          return function (a) {
              return Control_Bind.bind(dictMonad.Bind1())(f)(function (v) {
                  return Control_Bind.bind(dictMonad.Bind1())(a)(function (v1) {
                      return Control_Applicative.pure(dictMonad.Applicative0())(v(v1));
                  });
              });
          };
      };
  };
  exports["Monad"] = Monad;
  exports["ap"] = ap;
})(PS["Control.Monad"] = PS["Control.Monad"] || {});
(function(exports) {
    "use strict";

  exports.pureE = function (a) {
    return function () {
      return a;
    };
  };

  exports.bindE = function (a) {
    return function (f) {
      return function () {
        return f(a())();
      };
    };
  };

  exports.forE = function (lo) {
    return function (hi) {
      return function (f) {
        return function () {
          for (var i = lo; i < hi; i++) {
            f(i)();
          }
        };
      };
    };
  };
})(PS["Control.Monad.Eff"] = PS["Control.Monad.Eff"] || {});
(function(exports) {
  // Generated by purs version 0.11.7
  "use strict";
  var $foreign = PS["Control.Monad.Eff"];
  var Control_Applicative = PS["Control.Applicative"];
  var Control_Apply = PS["Control.Apply"];
  var Control_Bind = PS["Control.Bind"];
  var Control_Monad = PS["Control.Monad"];
  var Data_Functor = PS["Data.Functor"];
  var Data_Unit = PS["Data.Unit"];        
  var monadEff = new Control_Monad.Monad(function () {
      return applicativeEff;
  }, function () {
      return bindEff;
  });
  var bindEff = new Control_Bind.Bind(function () {
      return applyEff;
  }, $foreign.bindE);
  var applyEff = new Control_Apply.Apply(function () {
      return functorEff;
  }, Control_Monad.ap(monadEff));
  var applicativeEff = new Control_Applicative.Applicative(function () {
      return applyEff;
  }, $foreign.pureE);
  var functorEff = new Data_Functor.Functor(Control_Applicative.liftA1(applicativeEff));
  exports["functorEff"] = functorEff;
  exports["applyEff"] = applyEff;
  exports["applicativeEff"] = applicativeEff;
  exports["bindEff"] = bindEff;
  exports["monadEff"] = monadEff;
  exports["forE"] = $foreign.forE;
})(PS["Control.Monad.Eff"] = PS["Control.Monad.Eff"] || {});
(function(exports) {
    "use strict";

  exports.animate = function (ctx) {
      return function (callback) {
          function loop(timeStamp) {
              callback(ctx)();
              window.requestAnimationFrame(loop);
          }

          window.requestAnimationFrame(loop);
          return function () {}
      }
  }
  exports.addEventListener = function (ctx){
      return function (eventType) {
          return function(callback) {
              function eventHandler(e) {
                  callback(e)();
              }
              canvas.addEventListener(eventType, eventHandler);
              return function () {}
          }
      }
  }
})(PS["Control.Monad.Eff.DOM"] = PS["Control.Monad.Eff.DOM"] || {});
(function(exports) {
  /* global exports */
  "use strict";

  exports.getCanvasElementByIdImpl = function(id, Just, Nothing) {
      return function() {
          var el = document.getElementById(id);
          if (el && el instanceof HTMLCanvasElement) {
              return Just(el);
          } else {
              return Nothing;
          }
      };
  };

  exports.getContext2D = function(c) {
      return function() {
          return c.getContext('2d');
      };
  };

  exports.setFillStyle = function(style) {
      return function(ctx) {
          return function() {
              ctx.fillStyle = style;
              return ctx;
          };
      };
  };

  exports.setStrokeStyle = function(style) {
      return function(ctx) {
          return function() {
              ctx.strokeStyle = style;
              return ctx;
          };
      };
  };

  exports.beginPath = function(ctx) {
      return function() {
          ctx.beginPath();
          return ctx;
      };
  };

  exports.stroke = function(ctx) {
      return function() {
          ctx.stroke();
          return ctx;
      };
  };

  exports.lineTo = function(ctx) {
      return function(x) {
          return function(y) {
              return function() {
                  ctx.lineTo(x, y);
                  return ctx;
              };
          };
      };
  };

  exports.moveTo = function(ctx) {
      return function(x) {
          return function(y) {
              return function() {
                  ctx.moveTo(x, y);
                  return ctx;
              };
          };
      };
  };

  exports.closePath = function(ctx) {
      return function() {
          ctx.closePath();
          return ctx;
      };
  };

  exports.fillRect = function(ctx) {
      return function(r) {
          return function() {
              ctx.fillRect(r.x, r.y, r.w, r.h);
              return ctx;
          };
      };
  };

  exports.translate = function(t) {
      return function(ctx) {
          return function() {
              ctx.translate(t.translateX, t.translateY);
              return ctx;
          };
      };
  };
})(PS["Graphics.Canvas"] = PS["Graphics.Canvas"] || {});
(function(exports) {
  // Generated by purs version 0.11.7
  "use strict";
  var Control_Alt = PS["Control.Alt"];
  var Control_Alternative = PS["Control.Alternative"];
  var Control_Applicative = PS["Control.Applicative"];
  var Control_Apply = PS["Control.Apply"];
  var Control_Bind = PS["Control.Bind"];
  var Control_Category = PS["Control.Category"];
  var Control_Extend = PS["Control.Extend"];
  var Control_Monad = PS["Control.Monad"];
  var Control_MonadZero = PS["Control.MonadZero"];
  var Control_Plus = PS["Control.Plus"];
  var Data_Bounded = PS["Data.Bounded"];
  var Data_Eq = PS["Data.Eq"];
  var Data_Function = PS["Data.Function"];
  var Data_Functor = PS["Data.Functor"];
  var Data_Functor_Invariant = PS["Data.Functor.Invariant"];
  var Data_Monoid = PS["Data.Monoid"];
  var Data_Ord = PS["Data.Ord"];
  var Data_Ordering = PS["Data.Ordering"];
  var Data_Semigroup = PS["Data.Semigroup"];
  var Data_Show = PS["Data.Show"];
  var Data_Unit = PS["Data.Unit"];
  var Prelude = PS["Prelude"];        
  var Nothing = (function () {
      function Nothing() {

      };
      Nothing.value = new Nothing();
      return Nothing;
  })();
  var Just = (function () {
      function Just(value0) {
          this.value0 = value0;
      };
      Just.create = function (value0) {
          return new Just(value0);
      };
      return Just;
  })();
  var maybe = function (v) {
      return function (v1) {
          return function (v2) {
              if (v2 instanceof Nothing) {
                  return v;
              };
              if (v2 instanceof Just) {
                  return v1(v2.value0);
              };
              throw new Error("Failed pattern match at Data.Maybe line 219, column 1 - line 219, column 51: " + [ v.constructor.name, v1.constructor.name, v2.constructor.name ]);
          };
      };
  };
  var fromMaybe = function (a) {
      return maybe(a)(Control_Category.id(Control_Category.categoryFn));
  };
  exports["Nothing"] = Nothing;
  exports["Just"] = Just;
  exports["maybe"] = maybe;
  exports["fromMaybe"] = fromMaybe;
})(PS["Data.Maybe"] = PS["Data.Maybe"] || {});
(function(exports) {
  // Generated by purs version 0.11.7
  "use strict";
  var $foreign = PS["Graphics.Canvas"];
  var Control_Applicative = PS["Control.Applicative"];
  var Control_Bind = PS["Control.Bind"];
  var Control_Monad_Eff = PS["Control.Monad.Eff"];
  var Control_Monad_Eff_Exception_Unsafe = PS["Control.Monad.Eff.Exception.Unsafe"];
  var Control_Semigroupoid = PS["Control.Semigroupoid"];
  var Data_ArrayBuffer_Types = PS["Data.ArrayBuffer.Types"];
  var Data_Eq = PS["Data.Eq"];
  var Data_Function = PS["Data.Function"];
  var Data_Function_Uncurried = PS["Data.Function.Uncurried"];
  var Data_Functor = PS["Data.Functor"];
  var Data_Maybe = PS["Data.Maybe"];
  var Data_Semigroup = PS["Data.Semigroup"];
  var Data_Show = PS["Data.Show"];
  var Prelude = PS["Prelude"];
  var strokePath = function (ctx) {
      return function (path) {
          return function __do() {
              var v = $foreign.beginPath(ctx)();
              var v1 = path();
              var v2 = $foreign.stroke(ctx)();
              return v1;
          };
      };
  };
  var getCanvasElementById = function (elId) {
      return $foreign.getCanvasElementByIdImpl(elId, Data_Maybe.Just.create, Data_Maybe.Nothing.value);
  };
  exports["getCanvasElementById"] = getCanvasElementById;
  exports["strokePath"] = strokePath;
  exports["getContext2D"] = $foreign.getContext2D;
  exports["setFillStyle"] = $foreign.setFillStyle;
  exports["setStrokeStyle"] = $foreign.setStrokeStyle;
  exports["lineTo"] = $foreign.lineTo;
  exports["moveTo"] = $foreign.moveTo;
  exports["closePath"] = $foreign.closePath;
  exports["fillRect"] = $foreign.fillRect;
  exports["translate"] = $foreign.translate;
})(PS["Graphics.Canvas"] = PS["Graphics.Canvas"] || {});
(function(exports) {
  // Generated by purs version 0.11.7
  "use strict";
  var $foreign = PS["Control.Monad.Eff.DOM"];
  var Control_Monad_Eff = PS["Control.Monad.Eff"];
  var Graphics_Canvas = PS["Graphics.Canvas"];
  var Prelude = PS["Prelude"];
  exports["animate"] = $foreign.animate;
  exports["addEventListener"] = $foreign.addEventListener;
})(PS["Control.Monad.Eff.DOM"] = PS["Control.Monad.Eff.DOM"] || {});
(function(exports) {
    "use strict";

  //------------------------------------------------------------------------------
  // Array size ------------------------------------------------------------------
  //------------------------------------------------------------------------------

  exports.length = function (xs) {
    return xs.length;
  };

  //------------------------------------------------------------------------------
  // Indexed operations ----------------------------------------------------------
  //------------------------------------------------------------------------------

  exports.indexImpl = function (just) {
    return function (nothing) {
      return function (xs) {
        return function (i) {
          return i < 0 || i >= xs.length ? nothing :  just(xs[i]);
        };
      };
    };
  };
})(PS["Data.Array"] = PS["Data.Array"] || {});
(function(exports) {
    "use strict";

  exports.emptySTArray = function () {
    return [];
  };

  exports.peekSTArrayImpl = function (just) {
    return function (nothing) {
      return function (xs) {
        return function (i) {
          return function () {
            return i >= 0 && i < xs.length ? just(xs[i]) : nothing;
          };
        };
      };
    };
  };

  exports.pushAllSTArray = function (xs) {
    return function (as) {
      return function () {
        return xs.push.apply(xs, as);
      };
    };
  };
})(PS["Data.Array.ST"] = PS["Data.Array.ST"] || {});
(function(exports) {
  // Generated by purs version 0.11.7
  "use strict";
  var $foreign = PS["Data.Array.ST"];
  var Control_Applicative = PS["Control.Applicative"];
  var Control_Bind = PS["Control.Bind"];
  var Control_Monad_Eff = PS["Control.Monad.Eff"];
  var Control_Monad_ST = PS["Control.Monad.ST"];
  var Control_Semigroupoid = PS["Control.Semigroupoid"];
  var Data_Maybe = PS["Data.Maybe"];
  var Prelude = PS["Prelude"];
  var Unsafe_Coerce = PS["Unsafe.Coerce"];
  var pushSTArray = function (arr) {
      return function (a) {
          return $foreign.pushAllSTArray(arr)([ a ]);
      };
  };
  var peekSTArray = $foreign.peekSTArrayImpl(Data_Maybe.Just.create)(Data_Maybe.Nothing.value);
  exports["peekSTArray"] = peekSTArray;
  exports["pushSTArray"] = pushSTArray;
  exports["emptySTArray"] = $foreign.emptySTArray;
})(PS["Data.Array.ST"] = PS["Data.Array.ST"] || {});
(function(exports) {
  // Generated by purs version 0.11.7
  "use strict";
  var $foreign = PS["Data.Array"];
  var Control_Alt = PS["Control.Alt"];
  var Control_Alternative = PS["Control.Alternative"];
  var Control_Applicative = PS["Control.Applicative"];
  var Control_Apply = PS["Control.Apply"];
  var Control_Bind = PS["Control.Bind"];
  var Control_Category = PS["Control.Category"];
  var Control_Lazy = PS["Control.Lazy"];
  var Control_Monad_Eff = PS["Control.Monad.Eff"];
  var Control_Monad_Rec_Class = PS["Control.Monad.Rec.Class"];
  var Control_Monad_ST = PS["Control.Monad.ST"];
  var Control_Semigroupoid = PS["Control.Semigroupoid"];
  var Data_Array_ST = PS["Data.Array.ST"];
  var Data_Array_ST_Iterator = PS["Data.Array.ST.Iterator"];
  var Data_Boolean = PS["Data.Boolean"];
  var Data_Eq = PS["Data.Eq"];
  var Data_Foldable = PS["Data.Foldable"];
  var Data_Function = PS["Data.Function"];
  var Data_Functor = PS["Data.Functor"];
  var Data_HeytingAlgebra = PS["Data.HeytingAlgebra"];
  var Data_Maybe = PS["Data.Maybe"];
  var Data_NonEmpty = PS["Data.NonEmpty"];
  var Data_Ord = PS["Data.Ord"];
  var Data_Ordering = PS["Data.Ordering"];
  var Data_Ring = PS["Data.Ring"];
  var Data_Semigroup = PS["Data.Semigroup"];
  var Data_Semiring = PS["Data.Semiring"];
  var Data_Traversable = PS["Data.Traversable"];
  var Data_Tuple = PS["Data.Tuple"];
  var Data_Unfoldable = PS["Data.Unfoldable"];
  var Partial_Unsafe = PS["Partial.Unsafe"];
  var Prelude = PS["Prelude"];
  var index = $foreign.indexImpl(Data_Maybe.Just.create)(Data_Maybe.Nothing.value);
  exports["index"] = index;
})(PS["Data.Array"] = PS["Data.Array"] || {});
(function(exports) {
    'use strict';

  exports.property = function(object) {
    return function(key) {
      return object[key];
    };
  };

  exports.setProperty = function(object) {
    return function(key) {
      return function(value) {
        object[key] = value;
        return {};
      };
    };
  };
})(PS["FFI.Util"] = PS["FFI.Util"] || {});
(function(exports) {
  // Generated by purs version 0.11.7
  "use strict";
  var $foreign = PS["FFI.Util"];
  var Control_Applicative = PS["Control.Applicative"];
  var Control_Monad_Eff = PS["Control.Monad.Eff"];
  var Control_Monad_Eff_Uncurried = PS["Control.Monad.Eff.Uncurried"];
  var Data_Function_Uncurried = PS["Data.Function.Uncurried"];
  var Data_Maybe = PS["Data.Maybe"];
  var Data_Unit = PS["Data.Unit"];
  var Prelude = PS["Prelude"];
  exports["property"] = $foreign.property;
  exports["setProperty"] = $foreign.setProperty;
})(PS["FFI.Util"] = PS["FFI.Util"] || {});
(function(exports) {
    "use strict";          

  exports.cos = Math.cos;    

  exports.sin = Math.sin;      

  exports.pi = Math.PI;
})(PS["Math"] = PS["Math"] || {});
(function(exports) {
  // Generated by purs version 0.11.7
  "use strict";
  var $foreign = PS["Math"];
  exports["cos"] = $foreign.cos;
  exports["sin"] = $foreign.sin;
  exports["pi"] = $foreign.pi;
})(PS["Math"] = PS["Math"] || {});
(function(exports) {
  // Generated by purs version 0.11.7
  "use strict";
  var Control_Applicative = PS["Control.Applicative"];
  var Control_Bind = PS["Control.Bind"];
  var Control_Monad_Eff = PS["Control.Monad.Eff"];
  var Control_Monad_Eff_Console = PS["Control.Monad.Eff.Console"];
  var Control_Monad_Eff_DOM = PS["Control.Monad.Eff.DOM"];
  var Control_Monad_Eff_Random = PS["Control.Monad.Eff.Random"];
  var Control_Monad_Eff_Ref = PS["Control.Monad.Eff.Ref"];
  var Control_Monad_Eff_Timer = PS["Control.Monad.Eff.Timer"];
  var DOM = PS["DOM"];
  var Data_Array = PS["Data.Array"];
  var Data_Array_ST = PS["Data.Array.ST"];
  var Data_EuclideanRing = PS["Data.EuclideanRing"];
  var Data_Function = PS["Data.Function"];
  var Data_Functor = PS["Data.Functor"];
  var Data_Int = PS["Data.Int"];
  var Data_Maybe = PS["Data.Maybe"];
  var Data_Ord = PS["Data.Ord"];
  var Data_Ring = PS["Data.Ring"];
  var Data_Semiring = PS["Data.Semiring"];
  var Data_Unit = PS["Data.Unit"];
  var FFI_Util = PS["FFI.Util"];
  var Global_Unsafe = PS["Global.Unsafe"];
  var Graphics_Canvas = PS["Graphics.Canvas"];
  var $$Math = PS["Math"];
  var Partial_Unsafe = PS["Partial.Unsafe"];
  var Prelude = PS["Prelude"];        
  var rotateY = function (x) {
      return function (y) {
          return function (z) {
              return function (angle) {
                  var angleInRad = (angle * $$Math.pi) / 180.0;
                  var coss = $$Math.cos(angleInRad);
                  var sins = $$Math.sin(angleInRad);
                  var changeX = x * coss + z * sins;
                  var changeZ = z * coss - x * sins;
                  return [ changeX, y, changeZ ];
              };
          };
      };
  };
  var rotateX = function (x) {
      return function (y) {
          return function (z) {
              return function (angle) {
                  var angleInRad = (angle * $$Math.pi) / 180.0;
                  var coss = $$Math.cos(angleInRad);
                  var sins = $$Math.sin(angleInRad);
                  var changeY = y * coss - z * sins;
                  var changeZ = z * coss + y * sins;
                  return [ x, changeY, changeZ ];
              };
          };
      };
  };
  var roY = [ 0.0 ];
  var roX = [ 0.0 ];
  var prevY = [ 0.0 ];
  var prevX = [ 0.0 ];
  var initialNodes = [ [ -100.0, -100.0, -100.0 ], [ -100.0, -100.0, 100.0 ], [ -100.0, 100.0, -100.0 ], [ -100.0, 100.0, 100.0 ], [ 100.0, -100.0, -100.0 ], [ 100.0, -100.0, 100.0 ], [ 100.0, 100.0, -100.0 ], [ 100.0, 100.0, 100.0 ] ];
  var initialEdges = [ [ 0, 1 ], [ 1, 3 ], [ 3, 2 ], [ 2, 0 ], [ 4, 5 ], [ 5, 7 ], [ 7, 6 ], [ 6, 4 ], [ 0, 4 ], [ 1, 5 ], [ 2, 6 ], [ 3, 7 ] ];
  var draw = function (startX) {
      return function (startY) {
          return function (endX) {
              return function (endY) {
                  return function (ctx) {
                      return Graphics_Canvas.strokePath(ctx)(function __do() {
                          var v = Graphics_Canvas.setStrokeStyle("#0000FF")(ctx)();
                          var v1 = Graphics_Canvas.moveTo(ctx)(startX)(startY)();
                          var v2 = Graphics_Canvas.lineTo(ctx)(endX)(endY)();
                          var v3 = Graphics_Canvas.closePath(ctx)();
                          var v4 = Data_Array_ST.emptySTArray();
                          return Data_Functor["void"](Control_Monad_Eff.functorEff)(Data_Array_ST.pushSTArray(v4)(1))();
                      });
                  };
              };
          };
      };
  };
  var drag = [ 0 ];
  var mousedown = function (dictFunctor) {
      return function (dictBind) {
          return function (dictApplicative) {
              return function (val) {
                  return Data_Functor["void"](dictFunctor)(Control_Bind.bind(dictBind)(Control_Applicative.pure(dictApplicative)(FFI_Util.setProperty(drag)("0")(1)))(function (v) {
                      return Control_Applicative.pure(dictApplicative)(Data_Unit.unit);
                  }));
              };
          };
      };
  };
  var mouseup = function (dictFunctor) {
      return function (dictBind) {
          return function (dictApplicative) {
              return function (val) {
                  return Data_Functor["void"](dictFunctor)(Control_Bind.bind(dictBind)(Control_Applicative.pure(dictApplicative)(FFI_Util.setProperty(drag)("0")(0)))(function (v) {
                      return Control_Applicative.pure(dictApplicative)(Data_Unit.unit);
                  }));
              };
          };
      };
  };
  var diffY = [ 0.0 ];
  var diffX = [ 0.0 ];
  var cube = function (nodes) {
      return function (edges) {
          return function (ctx) {
              return Data_Functor["void"](Control_Monad_Eff.functorEff)(Control_Monad_Eff.forE(0)(12)(function (i) {
                  return function __do() {
                      var v = Data_Array_ST.peekSTArray(edges)(i)();
                      var edge = Data_Maybe.fromMaybe([  ])(v);
                      var edge0Temp = Data_Array.index(edge)(0);
                      var edge1Temp = Data_Array.index(edge)(1);
                      var edge0 = Data_Maybe.fromMaybe(0)(edge0Temp);
                      var edge1 = Data_Maybe.fromMaybe(0)(edge1Temp);
                      var v1 = Data_Array_ST.peekSTArray(nodes)(edge0)();
                      var v2 = Data_Array_ST.peekSTArray(nodes)(edge1)();
                      var sxMemp = Data_Maybe.fromMaybe([  ])(v1);
                      var syMemp = Data_Maybe.fromMaybe([  ])(v2);
                      var sxDemp = Data_Array.index(sxMemp)(0);
                      var syDemp = Data_Array.index(sxMemp)(1);
                      var exDemp = Data_Array.index(syMemp)(0);
                      var eyDemp = Data_Array.index(syMemp)(1);
                      var sx = Data_Maybe.fromMaybe(0.0)(sxDemp);
                      var sy = Data_Maybe.fromMaybe(0.0)(syDemp);
                      var ex = Data_Maybe.fromMaybe(0.0)(exDemp);
                      var ey = Data_Maybe.fromMaybe(0.0)(eyDemp);
                      return draw(sx)(sy)(ex)(ey)(ctx)();
                  };
              }));
          };
      };
  };
  var updateCube = function (xang) {
      return function (yang) {
          return function (ctx) {
              return function __do() {
                  var v = Data_Array_ST.emptySTArray();
                  Data_Functor["void"](Control_Monad_Eff.functorEff)(Control_Monad_Eff.forE(0)(8)(function (i) {
                      var temp = Data_Array.index(initialNodes)(i);
                      var temp2 = Data_Maybe.fromMaybe([  ])(temp);
                      return Data_Functor["void"](Control_Monad_Eff.functorEff)(Data_Array_ST.pushSTArray(v)(temp2));
                  }))();
                  var v1 = Data_Array_ST.emptySTArray();
                  Data_Functor["void"](Control_Monad_Eff.functorEff)(Control_Monad_Eff.forE(0)(12)(function (i) {
                      var temp = Data_Array.index(initialEdges)(i);
                      var temp2 = Data_Maybe.fromMaybe([  ])(temp);
                      return Data_Functor["void"](Control_Monad_Eff.functorEff)(Data_Array_ST.pushSTArray(v1)(temp2));
                  }))();
                  var v2 = Data_Array_ST.emptySTArray();
                  Data_Functor["void"](Control_Monad_Eff.functorEff)(Control_Monad_Eff.forE(0)(8)(function (i) {
                      return function __do() {
                          var v3 = Data_Array_ST.peekSTArray(v)(i)();
                          var cd = Data_Maybe.fromMaybe([  ])(v3);
                          var fx = Data_Array.index(cd)(0);
                          var fy = Data_Array.index(cd)(1);
                          var fz = Data_Array.index(cd)(2);
                          var x = Data_Maybe.fromMaybe(0.0)(fx);
                          var y = Data_Maybe.fromMaybe(0.0)(fy);
                          var z = Data_Maybe.fromMaybe(0.0)(fz);
                          var first = rotateX(x)(y)(z)(xang);
                          var mx = Data_Array.index(first)(0);
                          var my = Data_Array.index(first)(1);
                          var mz = Data_Array.index(first)(2);
                          var mxx = Data_Maybe.fromMaybe(0.0)(mx);
                          var myy = Data_Maybe.fromMaybe(0.0)(my);
                          var mzz = Data_Maybe.fromMaybe(0.0)(mz);
                          var second = rotateY(mxx)(myy)(mzz)(yang);
                          Data_Functor["void"](Control_Monad_Eff.functorEff)(Data_Array_ST.pushSTArray(v2)(second))();
                          var v4 = Data_Array_ST.emptySTArray();
                          return Data_Functor["void"](Control_Monad_Eff.functorEff)(Data_Array_ST.pushSTArray(v4)(1))();
                      };
                  }))();
                  cube(v2)(v1)(ctx)();
                  return Data_Unit.unit;
              };
          };
      };
  };
  var clear = function (ctx) {
      return function __do() {
          var v = Graphics_Canvas.setFillStyle("#FFFFFF")(ctx)();
          return Graphics_Canvas.fillRect(ctx)({
              x: -300.0,
              y: -300.0,
              w: 640.0,
              h: 640.0
          })();
      };
  };
  var acl = [ 0.0 ];
  var finalUpdate = function (ctx) {
      return Data_Functor["void"](Control_Monad_Eff.functorEff)((function () {
          var acc = FFI_Util.property(acl)("0");
          return function __do() {
              var v = (function () {
                  var $64 = acc > 0.0;
                  if ($64) {
                      return function __do() {
                          var v = FFI_Util.setProperty(acl)("0")(acc - 0.5);
                          var v1 = FFI_Util.property(diffX)("0");
                          var v2 = FFI_Util.property(diffY)("0");
                          var v3 = FFI_Util.property(roX)("0");
                          var v4 = FFI_Util.property(roY)("0");
                          var v5 = FFI_Util.setProperty(roX)("0")(v3 - v1);
                          var v6 = FFI_Util.setProperty(roY)("0")(v4 - v2);
                          return Data_Unit.unit;
                      };
                  };
                  return Control_Applicative.pure(Control_Monad_Eff.applicativeEff)(Data_Unit.unit);
              })()();
              var v1 = FFI_Util.property(roX)("0");
              var v2 = FFI_Util.property(roY)("0");
              var v3 = clear(ctx)();
              var v4 = updateCube(v2)(v1)(ctx)();
              return Data_Unit.unit;
          };
      })());
  };
  var mousemove = function (dictFunctor) {
      return function (dictBind) {
          return function (dictApplicative) {
              return function (val) {
                  return Data_Functor["void"](dictFunctor)((function () {
                      var cX = FFI_Util.property(val)("clientX");
                      var cY = FFI_Util.property(val)("clientY");
                      return Control_Bind.bind(dictBind)((function () {
                          var $71 = FFI_Util.property(drag)("0");
                          if ($71) {
                              var v = FFI_Util.property(prevX)("0");
                              var v1 = FFI_Util.property(prevY)("0");
                              var v2 = cX - v;
                              var v3 = cY - v1;
                              return Control_Bind.bind(dictBind)(Control_Applicative.pure(dictApplicative)(FFI_Util.setProperty(diffX)("0")(v2)))(function (v4) {
                                  return Control_Bind.bind(dictBind)(Control_Applicative.pure(dictApplicative)(FFI_Util.setProperty(diffY)("0")(v3)))(function (v5) {
                                      var acc = FFI_Util.property(acl)("0") + 2.0;
                                      return Control_Bind.bind(dictBind)(Control_Applicative.pure(dictApplicative)(FFI_Util.setProperty(acl)("0")(acc)))(function (v6) {
                                          return Control_Applicative.pure(dictApplicative)(Data_Unit.unit);
                                      });
                                  });
                              });
                          };
                          return Control_Applicative.pure(dictApplicative)(Data_Unit.unit);
                      })())(function (v) {
                          return Control_Bind.bind(dictBind)(Control_Applicative.pure(dictApplicative)(FFI_Util.setProperty(prevX)("0")(cX)))(function (v1) {
                              return Control_Bind.bind(dictBind)(Control_Applicative.pure(dictApplicative)(FFI_Util.setProperty(prevY)("0")(cY)))(function (v2) {
                                  return Control_Applicative.pure(dictApplicative)(Data_Unit.unit);
                              });
                          });
                      });
                  })());
              };
          };
      };
  };
  var main = Data_Functor["void"](Control_Monad_Eff.functorEff)(function __do() {
      var v = Graphics_Canvas.getCanvasElementById("canvas")();
      var __unused = function (dictPartial1) {
          return function ($dollar42) {
              return $dollar42;
          };
      };
      return __unused()((function () {
          if (v instanceof Data_Maybe.Just) {
              return function __do() {
                  var v1 = Graphics_Canvas.getContext2D(v.value0)();
                  var v2 = Graphics_Canvas.translate({
                      translateX: 300.0,
                      translateY: 300.0
                  })(v1)();
                  var v3 = clear(v1)();
                  Control_Monad_Eff_DOM.addEventListener(v.value0)("mousedown")(mousedown(Control_Monad_Eff.functorEff)(Control_Monad_Eff.bindEff)(Control_Monad_Eff.applicativeEff))();
                  Control_Monad_Eff_DOM.addEventListener(v.value0)("mousemove")(mousemove(Control_Monad_Eff.functorEff)(Control_Monad_Eff.bindEff)(Control_Monad_Eff.applicativeEff))();
                  Control_Monad_Eff_DOM.addEventListener(v.value0)("mouseup")(mouseup(Control_Monad_Eff.functorEff)(Control_Monad_Eff.bindEff)(Control_Monad_Eff.applicativeEff))();
                  Control_Monad_Eff_DOM.animate(v1)(finalUpdate)();
                  return Data_Unit.unit;
              };
          };
          throw new Error("Failed pattern match at Main line 229, column 9 - line 230, column 9: " + [ v.constructor.name ]);
      })())();
  });
  exports["clear"] = clear;
  exports["draw"] = draw;
  exports["rotateX"] = rotateX;
  exports["rotateY"] = rotateY;
  exports["cube"] = cube;
  exports["drag"] = drag;
  exports["prevX"] = prevX;
  exports["prevY"] = prevY;
  exports["diffX"] = diffX;
  exports["diffY"] = diffY;
  exports["acl"] = acl;
  exports["roX"] = roX;
  exports["roY"] = roY;
  exports["initialNodes"] = initialNodes;
  exports["initialEdges"] = initialEdges;
  exports["updateCube"] = updateCube;
  exports["mousedown"] = mousedown;
  exports["mouseup"] = mouseup;
  exports["mousemove"] = mousemove;
  exports["main"] = main;
  exports["finalUpdate"] = finalUpdate;
})(PS["Main"] = PS["Main"] || {});
PS["Main"].main();
